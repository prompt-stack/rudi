generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// =============================
/// Enums
/// =============================

enum Role {
  OWNER
  ADMIN
  INSTRUCTOR
  EDITOR
  LEARNER
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ComponentType {
  LEARNING_VIDEO  // Video in learning folder
  LEARNING_SLIDES // Slides in learning folder
  LAB_VIDEO       // Video in lab folder
  LAB_DATA        // Data folder in lab
  LAB_EXERCISE    // Complete lab exercise (video + data)
  QUIZ
  RESOURCE        // Additional resources
  TRANSCRIPT      // Transcript files
}

enum AssetRole {
  INSTRUCTION
  STARTER
  SOLUTION
  DATA
  RUBRIC
  CONFIG
  OTHER
}

enum EnrollmentStatus {
  ACTIVE
  PAUSED
  COMPLETED
  DROPPED
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum VideoProvider {
  CLOUDFLARE
  MUX
  YOUTUBE
  VIMEO
}

/// =============================
/// Auth & Users (BetterAuth compatible)
/// =============================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]
  enrollments   Enrollment[]
  progresses    UserProgress[]
  videoProgress VideoProgress[]
  certificates  Certificate[]
  events        ActivityEvent[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

/// =============================
/// Multi-tenant
/// =============================

model Organization {
  id        String   @id @default(cuid())
  slug      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  programs Program[]
  members  Membership[]

  @@map("organizations")
}

model Membership {
  id        String   @id @default(cuid())
  orgId     String
  userId    String
  role      Role     @default(LEARNER)
  createdAt DateTime @default(now())

  org  Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([orgId, userId])
  @@map("memberships")
}

/// =============================
/// Curriculum Core
/// =============================

model Program {
  id          String   @id @default(cuid())
  orgId       String?
  slug        String   @unique // deterministic from root folder
  name        String
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organization Organization? @relation(fields: [orgId], references: [id], onDelete: SetNull)
  courses      Course[]

  @@map("programs")
}

model Course {
  id                 String          @id @default(cuid())
  programId          String?
  slug               String          @unique // deterministic from folder (e.g., "course_01")
  title              String
  description        String?         @db.Text
  track              String?
  durationMinutes    Int?
  level              DifficultyLevel @default(BEGINNER)
  tags               String[]
  isPublished        Boolean         @default(false)
  isFeatured         Boolean         @default(false)
  publishedAt        DateTime?
  enrollmentCount    Int             @default(0)
  averageRating      Float?
  learningObjectives Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  program       Program?        @relation(fields: [programId], references: [id], onDelete: Cascade)
  lessons       Lesson[]
  enrollments   Enrollment[]
  certificates  Certificate[]
  UserProgress  UserProgress[]
  ActivityEvent ActivityEvent[]

  @@index([slug])
  @@index([isPublished, isFeatured])
  @@map("courses")
}

model Lesson {
  id              String           @id @default(cuid())
  courseId        String
  lessonNumber    String // "03.1"
  lessonSeq       Int
  subSeq          Int
  title           String
  description     String?          @db.Text
  durationMinutes Int?
  difficultyLevel DifficultyLevel?
  folderPath      String? // relative path for traceability

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course        Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  components    Component[]
  assets        Asset[]
  UserProgress  UserProgress[]
  ActivityEvent ActivityEvent[]

  @@unique([courseId, lessonNumber])
  @@index([courseId, lessonSeq, subSeq])
  @@map("lessons")
}

model Component {
  id             String        @id @default(cuid())
  lessonId       String
  type           ComponentType
  name           String
  groupKey       String? // e.g., "learning/slides" or "lab/"
  orderIndex     Int           @default(0)
  isRequired     Boolean       @default(true)
  assetCount     Int           @default(0)
  totalSizeBytes Int           @default(0)

  // Video specifics via join table for cleanliness
  videoDetail ComponentVideo?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lesson        Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  assets        Asset[]
  UserProgress  UserProgress[]
  VideoProgress VideoProgress[]
  ActivityEvent ActivityEvent[]

  @@unique([lessonId, type, groupKey])
  @@index([lessonId, orderIndex])
  @@map("components")
}

model ComponentVideo {
  id              String        @id @default(cuid())
  componentId     String        @unique
  provider        VideoProvider @default(CLOUDFLARE)
  providerId      String
  thumbnailUrl    String?
  durationSeconds Int?
  isPreview       Boolean       @default(false)
  isDRM           Boolean       @default(false)

  component Component @relation(fields: [componentId], references: [id], onDelete: Cascade)

  @@index([provider, providerId])
  @@map("component_videos")
}

model Asset {
  id           String     @id @default(cuid())
  componentId  String?
  lessonId     String
  relativePath String
  mimeType     String?
  sizeBytes    Int
  checksumSha1 String // 40 hex, store full
  orderIndex   Int        @default(0)
  role         AssetRole?
  metadata     Json?

  // Media hints
  durationSeconds Int?
  widthPixels     Int?
  heightPixels    Int?
  wordCount       Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  component Component? @relation(fields: [componentId], references: [id], onDelete: Cascade)
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([lessonId, relativePath])
  @@index([componentId, orderIndex])
  @@map("assets")
}

/// =============================
/// Enrollment & Progress
/// =============================

model Enrollment {
  id          String           @id @default(cuid())
  userId      String
  courseId    String
  status      EnrollmentStatus @default(ACTIVE)
  completedAt DateTime?
  expiresAt   DateTime?

  // Aggregates (optional, updated by job)
  completedLessons Int @default(0)
  totalLessons     Int @default(0)
  progressPercent  Int @default(0)

  enrolledAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([status, expiresAt])
  @@map("enrollments")
}

model UserProgress {
  id               String         @id @default(cuid())
  userId           String
  courseId         String?
  lessonId         String?
  componentId      String?
  status           ProgressStatus @default(NOT_STARTED)
  score            Float?
  timeSpentMinutes Int            @default(0)
  attempts         Int            @default(0)
  notes            String?        @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course?    @relation(fields: [courseId], references: [id], onDelete: SetNull)
  lesson    Lesson?    @relation(fields: [lessonId], references: [id], onDelete: SetNull)
  component Component? @relation(fields: [componentId], references: [id], onDelete: SetNull)

  @@unique([userId, componentId])
  @@index([userId, status])
  @@map("user_progress")
}

model VideoProgress {
  id              String    @id @default(cuid())
  userId          String
  componentId     String // must reference a VIDEO component
  watchedSeconds  Int       @default(0)
  totalSeconds    Int
  progressPercent Int       @default(0)
  isCompleted     Boolean   @default(false)
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  lastWatchedAt   DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  component Component @relation(fields: [componentId], references: [id], onDelete: Cascade)

  @@unique([userId, componentId])
  @@index([isCompleted])
  @@map("video_progress")
}

model Certificate {
  id                String    @id @default(cuid())
  userId            String
  courseId          String
  certificateNumber String    @unique
  issuedAt          DateTime  @default(now())
  expiresAt         DateTime?
  verificationUrl   String?
  pdfUrl            String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("certificates")
}

/// =============================
/// Import Staging & Events
/// =============================

model ImportRun {
  id             String    @id @default(cuid())
  type           String
  rootPath       String?
  startedAt      DateTime  @default(now())
  completedAt    DateTime?
  status         String    @default("running")
  filesProcessed Int       @default(0)
  filesAdded     Int       @default(0)
  filesUpdated   Int       @default(0)
  filesSkipped   Int       @default(0)
  errorMessage   String?   @db.Text
  metadata       Json?

  assets AssetImport[]
  comps  ComponentImport[]

  @@map("import_runs")
}

model ComponentImport {
  id          String        @id @default(cuid())
  importRunId String
  lessonId    String
  type        ComponentType
  name        String
  groupKey    String?
  orderIndex  Int           @default(0)

  importRun ImportRun @relation(fields: [importRunId], references: [id], onDelete: Cascade)

  @@map("components_import")
}

model AssetImport {
  id           String     @id @default(cuid())
  importRunId  String
  componentId  String?
  lessonId     String
  relativePath String
  mimeType     String?
  sizeBytes    Int
  checksumSha1 String
  orderIndex   Int        @default(0)
  role         AssetRole?
  metadata     Json?

  importRun ImportRun @relation(fields: [importRunId], references: [id], onDelete: Cascade)

  @@map("assets_import")
}

model ActivityEvent {
  id          String   @id @default(cuid())
  userId      String?
  courseId    String?
  lessonId    String?
  componentId String?
  type        String // view, complete, quiz.submit, lab.start, etc.
  payload     Json?
  ip          String?
  ua          String?
  createdAt   DateTime @default(now())

  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  course    Course?    @relation(fields: [courseId], references: [id], onDelete: SetNull)
  lesson    Lesson?    @relation(fields: [lessonId], references: [id], onDelete: SetNull)
  component Component? @relation(fields: [componentId], references: [id], onDelete: SetNull)

  @@index([type, createdAt])
  @@map("activity_events")
}
